<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/task
		http://www.springframework.org/schema/task/spring-task.xsd">
    
    <description>Spring MVC Configuration</description>
    
    <!-- 加载配置属性文件 -->
	<context:property-placeholder ignore-unresolvable="true" location="classpath:config/config.properties" />
	<!-- 使用Annotation自动注册Bean,只扫描@Controller -->
	<context:component-scan base-package="com.quarkdata.yunpan.api" use-default-filters="false"><!-- base-package 如果多个，用“,”分隔 -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>



	<!-- 默认的注解映射的支持，org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping -->
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
		    	<constructor-arg value="UTF-8" />
			</bean>
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出为false -->
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                	<list><value>application/json;charset=UTF-8</value></list>
                </property>
                <property name="prettyPrint" value="false"/>
                <property name="objectMapper">
                    <bean class="com.quarkdata.yunpan.api.util.common.mapper.JsonMapper"></bean>
                </property>
            </bean>
            <!-- 使用XML格式输出数据 -->
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<!-- 开启Spring对AspectJ注解的支持 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

    <!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
	    <property name="mediaTypes" >
	        <map> 
                <entry key="xml" value="application/xml"/> 
                <entry key="json" value="application/json"/> 
            </map>
	    </property>
        <property name="ignoreAcceptHeader" value="true"/>
        <property name="favorPathExtension" value="true"/>
	</bean>
	
	<!-- 定义视图文件解析 -->
	<!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="${web.view.prefix}"/>
		<property name="suffix" value="${web.view.suffix}"/>
	</bean>-->
	
	<!-- 对静态资源文件的访问， 将无法mapping到Controller的path交给default servlet handler处理 -->
	<mvc:default-servlet-handler />
	
	<!-- 静态资源映射 -->
    <mvc:resources mapping="/resources/static/**" location="/static/" cache-period="31536000"/>
	
	<!-- 定义无Controller的path<->view直接映射 -->
	<mvc:view-controller path="/" view-name="redirect:${web.view.index}"/>
	
	<!-- 拦截器配置，拦截顺序：先执行后定义的，排在第一位的最后执行。-->
	<mvc:interceptors>
		<!--日志拦截器-->
		<mvc:interceptor>
			<mvc:mapping path="${adminPath}/**" />
			<mvc:exclude-mapping path="${adminPath}/"/>
			<!--<mvc:exclude-mapping path="${adminPath}/login"/>
			<mvc:exclude-mapping path="${adminPath}/sys/menu/tree"/>
			<mvc:exclude-mapping path="${adminPath}/sys/menu/treeData"/>
			<mvc:exclude-mapping path="${adminPath}/oa/oaNotify/self/count"/>-->
			<bean class="com.quarkdata.yunpan.api.interceptor.LogInterceptor" />
		</mvc:interceptor>

		<!--接口鉴权拦截器-->
		<mvc:interceptor>
			<mvc:mapping path="/api/**" />
			<!--<mvc:mapping path="/login/sourceByName" />-->
			<!--<mvc:mapping path="/get_link_subfile"/>-->
			<bean class="com.quarkdata.yunpan.api.interceptor.ApiTokenValidateInterceptor" />
		</mvc:interceptor>

		<!--后台管理拦截器-->
		<mvc:interceptor>
			<mvc:mapping path="/api/dashboard/usage"/>
			<mvc:mapping path="/api/dashboard/rank"/>
			<mvc:mapping path="/api/admin/list"/>
			<mvc:mapping path="/api/admin/add"/>
			<mvc:mapping path="/api/admin/revoke"/>
			<mvc:mapping path="/api/admin/revoke/org"/>
			<mvc:mapping path="/api/admin/edit"/>
			<mvc:mapping path="/api/admin/edit/org"/>
			<mvc:mapping path="/api/log/list"/>
			<mvc:mapping path="/api/log/export"/>
			<mvc:mapping path="/api/settings/check"/>
			<mvc:mapping path="/api/settings/update"/>
			<bean class="com.quarkdata.yunpan.api.interceptor.BackgroundManageInterceptor"/>
		</mvc:interceptor>


	</mvc:interceptors>

	
	<!-- 支持Shiro对Controller的方法级AOP安全控制 begin-->
	<!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>-->
	
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.apache.shiro.authz.UnauthorizedException">error/403</prop>
				<!-- <prop key="java.lang.Throwable">error/500</prop> -->
			</props>
			</property>
	</bean>
	<!-- 支持Shiro对Controller的方法级AOP安全控制 end -->
	
	<!-- 上传文件拦截，设置最大上传文件大小   10M=10*1024*1024(B)=10485760 bytes -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- <property name="maxUploadSize" value="${web.maxUploadSize}"/> -->
        <!-- 设置在文件上传时允许写到内存中的最大值，以字节为单位计算，默认是10240 --> 
        <!-- 但是经实验，上传文件大小若小于此参数，则不会生成临时文件，故改为2048 --> 
        <property name="maxInMemorySize" value="2048" /> 
    </bean>
	
	<!-- 配置 JSR303 Bean Validator 定义 -->
	<!--<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />-->

	<!--邮件/短信发送线程池-->
	<bean id="sendTaskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数 -->
		<property name="corePoolSize" value="${task.core_pool_size}" />
		<!-- 最大线程数 -->
		<property name="maxPoolSize" value="${task.max_pool_size}" />
		<!-- 队列最大长度 -->
		<property name="queueCapacity" value="${task.queue_capacity}" />
		<!-- 线程池维护线程所允许的空闲时间，默认为60s -->
		<property name="keepAliveSeconds" value="${task.keep_alive_seconds}" />
	</bean>
	<!-- 注解式 -->
	<task:annotation-driven />


</beans>